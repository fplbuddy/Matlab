fpath = '/Users/philipwinchester/Dropbox/Matlab/WNL/Functions';
addpath(fpath)
datapath = '/Volumes/Samsung_T5/OldData/WNLData.mat';
load(datapath)
addpath('/Users/philipwinchester/Dropbox/Matlab/chebfun-master');
%% play
n = 400;
[c,H] = polyfitA(As',sigmas',n);
yy = polyvalA(c,H,As');
figure()
semilogy(As,abs(sigmas'-yy)), hold on


%%
N = 32;
G = 2;
n = [-(N/2):2:(N/2-1) -(N/2-1):2:(N/2-1)]; n = repmat(n, N/2);  n = n(1,:);
m = 1:N; m = repelem(m, N/2);
[~,~,n,m] = GetRemGeneral(n,m,N);
positionMatrix = MakePositionMatrix(n,m);
As = 0:0.001:2;
Fs = [];
sigmas = [];
for i = 1:length(As) % this evaluates F(A) and sigmas
    i
    M = MakeMatrixEigProb(N,G, As(i));
    [V, sigma] = eig(M);
    sigma = diag(sigma);
    [~,I] = max(real(sigma));
    V = V(:,I);
    sigmas = [sigmas sigma(I)];
    F = GetF(V,n,m,positionMatrix,N,G);
    Fs = [Fs F];
end
% add reverse
As = [-As(end:-1:2) As];
Fs = [-Fs(end:-1:2) Fs];
sigmas = [sigmas(end:-1:2) sigmas];

%% do the scalings
Ktwo = (2*pi/G)^2 + pi^2;
a = (1/pi)*(4*G^3/(Ktwo^2*(4+G^2)^2))^(1/3);
As = As/a;

WNLData.As = As;
WNLData.Fs = Fs;
WNLData.sigmas = sigmas;

%%
As = WNLData.As;
Fs = WNLData.Fs;
sigmas =  WNLData.sigmas;

r_list = [1e3];
eps = 1e-1;
tmax = 1e3;
reset = 0;
for i=1:length(r_list)
    r = r_list(i)
    rS = rtorS(r);
    epsS = epstoepsS(eps);
%     if not(isfield(WNLData.(epsS),rS)) || reset % stat from scratch
        A0 = sqrt(r);
        phi0 = 1;
    solv = Solver_v2([A0 phi0],[0 tmax],As, sigmas,eps,r,imag(Fs));
        WNLData.(epsS).(rS).r = r;
        WNLData.(epsS).(rS).eps = eps;
        WNLData.(epsS).(rS).A = solv.y(1,:);
        WNLData.(epsS).(rS).phi = solv.y(2,:);
        WNLData.(epsS).(rS).t = solv.x;
        %[A,phi] = Solver_cheb(A0,phi0,tmax,r,As,sigmas,imag(Fs),eps);
%     else
%         A = WNLData.(epsS).(rS).A;
%         B = WNLData.(epsS).(rS).B;
%         t = WNLData.(epsS).(rS).t;
%         rem  = find(isnan(A))
%         A(rem) = [];
%         B(rem) = [];
%         t(rem) = [];
%         tend = t(end);
%         A0 = A(end);
%         B0 = B(end);
%         solv = Solver_2([A0 B0],[0 tmax],As, sigmas,eps,r,imag(Fs));
%         Aadd = solv.y(1,:); Aadd = Aadd(2:end);
%         Badd = solv.y(2,:); Badd = Badd(2:end);
%         tadd = solv.x + tend; tadd = tadd(2:end);
%         WNLData.(epsS).(rS).A = [A Aadd];
%         WNLData.(epsS).(rS).B = [B Badd];
%         WNLData.(epsS).(rS).t = [t tadd];
    %end
end
save(datapath, "WNLData")
%% some plots
close all
r = 1e3;
rS = rtorS(r);
plot(WNLData.eps_0_1.(rS).t, abs(WNLData.eps_0_1.(rS).A), '-o'), hold on
%plot(WNLData.eps_0_1.(rS).t, WNLData.eps_0_1.(rS).phi, '-o')

%%
x = Solver_test(1e-5,[0 10], -10);
semilogy(x.x,x.y)

%% plot sigma and F
FS = 20;
TE = 'latex';
set(groot,'defaultTextInterpreter',TE);
set(groot, 'DefaultAxesTickLabelInterpreter', TE)
set(groot, 'DefaultLegendInterpreter', TE)
As = WNLData.As;
Fs = WNLData.Fs;
sigmas = WNLData.sigmas;

figure('Renderer', 'painters', 'Position', [5 5 540 200])
plot(As, sigmas, '-o');
ax = gca;
ax.XAxis.FontSize = FS;
ax.YAxis.FontSize = FS;
xlim([-5 5])
xlabel('$A$', 'FontSize', FS)
ylabel('$\sigma(A)$', 'FontSize', FS)

figure('Renderer', 'painters', 'Position', [5 5 540 200])
plot(As, imag(Fs), '-o');
xlim([-5 5])
ax = gca;
ax.XAxis.FontSize = FS;
ax.YAxis.FontSize = FS;
xlabel('$A$', 'FontSize', FS)
ylabel('$F(A)$', 'FontSize', FS)

%% Plot the other time series
figsave = '/Users/philipwinchester/Desktop/Figs/';
rS_list = string(fields(WNLData.Bsmall_1e250.eps_0_001));
%rS_list = ["r_1e4"];
for i=1:length(rS_list)
    figure('Renderer', 'painters', 'Position', [5 5 540 400])
    rS = rS_list(i);
    A = WNLData.Bsmall_1e250.eps_0_001.(rS).A;
    B = WNLData.Bsmall_1e250.eps_0_001.(rS).B/1e250;
    t = WNLData.Bsmall_1e250.eps_0_001.(rS).t;
    r = WNLData.Bsmall_1e250.eps_0_001.(rS).r;
    subplot(2,1,1)
    semilogy(t,abs(A))
    ylabel('$A$', 'FontSize', FS)
    ax = gca;
    ax.XAxis.FontSize = FS;
    ax.YAxis.FontSize = FS;
    xlim([0 max(t)])
    set(gca,'xtick',[])
    
    subplot(2,1,2)
    semilogy(t,abs(B))
    ylabel('$B$', 'FontSize', FS)
    ax = gca;
    ax.XAxis.FontSize = FS;
    ax.YAxis.FontSize = FS;
    xlabel('$t$', 'FontSize', FS)
    sgtitle(['$r = ' num2str(r,'%.2e') ', \epsilon = 1e-3, B_0 = 1e250'  '$'], 'FontSize',FS)
    xlim([0 max(t)])
    saveas(gcf,[figsave num2str(r) 'log250.eps'], 'epsc')
end